Boozie {

Program         = Block
Block           = (Stmt)*
Stmt            = IfStmt                                    -- if
                  | ForStmt                                 -- for
                  | WhileStmt                               -- while
                  | ReturnStmt                              -- return
                  | Decl                                    -- decl
                  | Print                                   -- print
                  | Exp                                     -- exp

IfStmt          = "if" Exp "{" Block "}" "else if" Exp "{" Block "}" "else" "{" Block "}"                   -- ifelsifelse
                  | "if" Exp "{" Block "}" "else if" Exp "{" Block "}"  -- ifelsif
                  | "if" Exp "{" Block "}" "else" "{" Block "}"     -- ifelse
                  | "if" Exp "{" Block "}"                  -- simpleif

WhileStmt       = "while" Exp "{" Block "}"
ForStmt         = "for" id "in" Exp "{" Block "}"
Decl            = FunDecl | VarDecl
FunDecl         = ("let" | "set") id "=" Params "=>" "{" Block "}" -- func
Params          = "(" (Param ("," Param)*)* ")"
Param           = id

Other           = "_"                                     -- wildcard
ReturnStmt      = "return" Exp
VarDecl         = ("let" | "set") Ids "=" Exps              -- decl
Print           = "burp" "(" Exp ")"
Exp             = Exp1 "and" Exp                            -- and
                  | Exp1 "or" Exp                           -- or
                  | Exp1
Exp1            = Exp2 relationalOp Exp2                    -- relop
                  | id assignOp Exp                         -- reassign
                  | Exp2
Exp2            = Exp3 addOp Exp3                           -- addop
                  | Exp3
Exp3            = Exp4 mulOp Exp4                           -- mulop
                  | Exp4
Exp4            = "-" Exp5                                 -- negop
                  | Exp5
Exp5            = Literal
                  | VarExp  Args                          -- funcall
                  | VarExp
                  | "(" Exp ")"                            -- parens
                  | "[" Exps "]"                            -- array
VarExp          = VarExp "[" Exp "]"                        -- subscript
                  | id
Args            = "()"
                  | "(" Ids ")"                             -- ids
Exps            = NonemptyListOf<Exp,",">
Ids             = NonemptyListOf<id,",">

Literal         = floatlit                                  -- float
                  | boollit                                 -- bool
                  | stringlit                               -- string
type            = "float"                                   -- float
                  | "bool"                                  -- bool
                  | "string"                                -- string
boollit         = "true"                                    -- true
                  | "false"                                 -- false
floatlit        = digit+ ("." digit+)? (("E"|"e") ("+"|"-"))? -- float
stringlit       = "\"" char* "\""                             -- string
    char        = ~"'" ~"\"" (escape | any)
    escape      = "\\" ("r" | "n" | "'" | "\"" | coded)
    coded       = "u" hexDigit hexDigit hexDigit hexDigit

keyword         = ("let"    | "set"   | "burp"  | "for"   | "in"
                  | "while" | "match" | "if"    | "else"  | "new"
                  | "true"  | "false" | "return") ~idrest
id              = ~keyword letter idrest*                   -- id
idrest          = "_" | alnum
comment         = "//" (~"\n" any)* "\n"

assignOp        = "="                                       -- equals
                  | "+="                                    -- plusEq
                  | "*="                                    -- timesEq
                  | "-="                                    -- minusEq
                  | "/="                                    -- divEq
                  | "%="                                    -- modEq
relationalOp    = "=="                                      -- equals
                  | ">"                                     -- greater
                  | "<"                                     -- less
                  | ">="                                    -- greaterEq
                  | "<="                                    -- lessEq
                  | "!="                                    -- notEq
addOp           = "+"                                       -- add
                  | "-"                                     -- subtract
mulOp           = "*"                                       -- times
                  | "/"                                     -- divide
                  | "%"                                     -- mod

}
